#!/bin/bash

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

# ===============================================================================
## Properties
# ===============================================================================
## OpenStack Properties
# ===============================================================================
OPENSTACK_VENDOR_DATA='http://169.254.169.254/openstack/latest/vendor_data.json'
OPENSTACK_VENDOR_DATA_2='http://169.254.169.254/openstack/latest/vendor_data2.json'
# ===============================================================================
## Chameleon Properties
# ===============================================================================
CHAMELEON_OS_AUTH_URL_TMPL='https://chi.SITE.chameleoncloud.org:5000/v3'
PROVENANCE_FILE='/opt/chameleon/provenance.json'
# ===============================================================================
## CC-Snapshot Properties
# ===============================================================================
# Snapshot disk format
CC_SNAPSHOT_DISK_FORMAT=qcow2
# Generated snapshot locations
CC_SNAPSHOT_TAR_PATH=/tmp/snapshot.tar
CC_SNAPSHOT_CONVERTED_PATH=/tmp/snapshot.qcow2
CC_SNAPSHOT_CONVERTED_COMPRESSED_PATH=/tmp/snapshot_compressed.qcow2
# Max snapshot tarball size (MB) for save upload
CC_SNAPSHOT_MAX_TARBALL_SIZE=8000
# ===============================================================================

PARTITION_IMAGE=false
IGNORE_WARNING=false
FORCE_YES=false

print_usage() {
  echo "usage: $0 [-p] [-e folder_to_exclude] snapshot_name"
  echo "Optional arguments:"
  echo ""
  echo "  -h        Print this help message"
  echo "  -p        Create a partition image (separate kernel and ramdisk, no MBR)"
  echo "  -e        Exclude folder while snapshotting (can be used multiple times to exclude multiple folders)"
  echo "  -f        Ignore all warnings"
  echo "  -y        Answer 'yes' to all prompts"
  echo ""
  echo " cc-snapshot version 0.2.0"
}

while getopts "hpe:fy" opt; do
  case $opt in
    h)
      print_usage
      exit 0
      ;;
    p)
      PARTITION_IMAGE=true
      ;;
    e)
      EXCLUDE_FOLDERS+=("$OPTARG")
      ;;
    f)
      IGNORE_WARNING=true
      ;;
    y)
      FORCE_YES=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      print_usage
      exit 1
      ;;
  esac
done

###### Update section ######

#Download latest version, assign versions to variables, curlstat variable ensures update only executes if curl succeeds.
#------------------------------------------------
SCRIPT=$0
curl -s -o /tmp/tmp-snap https://raw.githubusercontent.com/ChameleonCloud/cc-snapshot/master/cc-snapshot
CURLSTAT=$?
NEWSCRIPT='/tmp/tmp-snap'

#Compare files and update if cc-snapshot outdated
#------------------------------------------------
diff -q "$SCRIPT" "$NEWSCRIPT" &>/dev/null
DIFF=$?
if [ $DIFF -eq 1 ] && [ $CURLSTAT -eq 0 ]; then
  echo 'Your cc-snapshot is not up to date.'
  if [ $IGNORE_WARNING == false ]; then
  	if [ $FORCE_YES == false ]; then
      read -ep 'Update now? [y/n]'
    else
      REPLY=y
    fi

  	if [[ $REPLY =~ ^[Yy]$ ]]; then
    	mv --backup=t "$SCRIPT" "$SCRIPT'-old'"
    	mv "$NEWSCRIPT" "$SCRIPT"
    	chmod +x "$SCRIPT"
  	  exec "$SCRIPT" "$@"
    fi
  fi
fi

###### Update section end ######

###### Check openstackclient version ######
## each separate version number must be less than 3 digit wide !
function version { echo "$@" | gawk -F. '{ printf("%03d%03d%03d\n", $1,$2,$3); }'; }

openstackclient_version=$(echo $(openstack --version 2>/dev/null) | awk -F" " '{ print $2}')
if [ "$(version "$openstackclient_version")" -lt "$(version "3.16.0")" ]; then
  echo "The openstack client version is too old; please run 'sudo pip install python-openstackclient --upgrade' to update"
  echo "If you are using python 2, please also run 'sudo pip install --upgrade \"more-itertools<6.0.0\"', since more-itertools (used by openstack client) dropped support of python 2 after version 6.0.0."
  exit 1
fi
###### Check openstackclient version end ######

###### Get provenance properties ######
PROVENANCE_PROPERTIES=''
if [ -f "$PROVENANCE_FILE" ]; then
  for prop in $(cat $PROVENANCE_FILE | tr -d '\n' | tr -d [:space:] | tr -d '{' | tr -d '}' | tr ',' '\n');
  do
    prop="${prop/\":\"/=}"
    prop="$(echo $prop | tr -d '"')"
    PROVENANCE_PROPERTIES="--property provenance-$prop $PROVENANCE_PROPERTIES"
  done
fi
###### Get provenance properties end ######

set -eu
set -o pipefail

shift $((OPTIND-1))

HOSTNAME=$(hostname)
UUID=$(uuidgen)

if [ $# -eq 0 ]; then
  SNAPSHOT_NAME="${HOSTNAME}_${UUID}"
else
  SNAPSHOT_NAME="$1"
fi

echo "Will snapshot the instance using the following name: '$SNAPSHOT_NAME'"
if [ -n "${EXCLUDE_FOLDERS+x}" ]; then
  for folder in "${EXCLUDE_FOLDERS[@]}"; do
    echo "Will exclude folder: $folder"
  done
fi

# Tar can read a file that contains a list of newline-separated file patterns
# for exclusion. Empty lines are OK. Commented lines technically are interpreted
# as a file, but they shouldn't match anything.
EXCLUDE_FROM="$(mktemp)"
cat >$EXCLUDE_FROM <<EOF
# Temp
/tmp/*
/var/tmp/*
# Instance-specific
/proc/*
/boot/extlinux
/var/lib/cloud
# Sockets
/var/lib/gssproxy/*.sock
/var/spool/postfix
# Swift cloudfuse mount
/home/cc/my_mounting_point
# Ubuntu lxcfs
/var/lib/lxcfs
# User excludes
$(printf "%s\n" "${EXCLUDE_FOLDERS[@]:-}")
EOF

DISTRO=$(gawk -F= '/^NAME/{print $2}' /etc/os-release | tr -d \"\' | tr ' ' '-')
UBUNTU='Ubuntu'
CENTOS='CentOS-Linux'

UBUNTU_VERSION=''
if [ $DISTRO = $UBUNTU ]; then
  UBUNTU_VERSION=$(lsb_release -c | awk '{print $2}')
fi

CENTOS_VERSION=''
if [ $DISTRO = $CENTOS ]; then
	CENTOS_VERSION=$(gawk -F= '/^VERSION_ID/{print $2}' /etc/os-release | tr -d \"\' | tr ' ' '-')
fi

# Configure env for glance to upload image
# try vendordata2.json first and fallback to vendordata.json if empty
JSON_VENDOR_DATA=$(curl -s $OPENSTACK_VENDOR_DATA_2)
NEW_VENDOR_DATA=true
if [ "$JSON_VENDOR_DATA" = '{}' ]; then
  JSON_VENDOR_DATA=$(curl -s $OPENSTACK_VENDOR_DATA)
  NEW_VENDOR_DATA=false
fi

if hash jq 2>/dev/null; then
  if $NEW_VENDOR_DATA; then
    JSON_VENDOR_DATA=$(echo $JSON_VENDOR_DATA | jq -r .chameleon)
  fi
  SITE=$(echo $JSON_VENDOR_DATA | jq -r .site)
  REGION=$(echo $JSON_VENDOR_DATA | jq -r .region)
  PROJECT_ID=$(echo $JSON_VENDOR_DATA | jq -r .project_id)
  TOKEN=$(echo $JSON_VENDOR_DATA | jq -r .service_token)
else
  # jq not available
  function extract_json_key {
    RESULT=$(echo "$2" | sed "s/.*$1\": \"//g" | sed 's/".*//g')
    echo "$RESULT"
  }
  SITE=$(extract_json_key "site" "$JSON_VENDOR_DATA")
  REGION=$(extract_json_key "region" "$JSON_VENDOR_DATA")
  PROJECT_ID=$(extract_json_key "project_id" "$JSON_VENDOR_DATA")
  TOKEN=$(extract_json_key "service_token" "$JSON_VENDOR_DATA")
fi

if dmesg | grep -q Hypervisor; then
  # The current instance is apparently not a baremetal node.
  >&2 echo "Error: cc-snapshot is only supported for baremetal instances."
  exit 1
fi

export OS_REGION_NAME=$REGION
if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi

export OS_AUTH_URL=$(echo $CHAMELEON_OS_AUTH_URL_TMPL | sed "s/SITE/$SITE/g")
export OS_IDENTITY_API_VERSION=3
export OS_PROJECT_ID=$PROJECT_ID
export OS_TOKEN=$TOKEN
export OS_AUTH_TYPE="token"

set +e
openstack image list >/dev/null #2>&1
if [ ! $? -eq 0 ]; then
  echo Unable to contact Glance, check username and password
  exit 1
fi
set -e

#################################
# Begin the snapshotting process
#################################

if [ $DISTRO = $CENTOS ] && [ $CENTOS_VERSION -eq 7 ]; then
  # Install prerequisite software (only required for XFS file systems, which is the default on CentOS 7):
  yum install -y libguestfs-xfs
  yum update -y lvm2 # must be at least 2.02-171 to avoid bug https://bugzilla.redhat.com/show_bug.cgi?id=1475018
fi

# Create a tar file of the contents of your instance:
declare -a TAR_ARGS=(--selinux --acls --numeric-owner --one-file-system --exclude-from $EXCLUDE_FROM)
if [ $DISTRO = $CENTOS ]; then
  TAR_ARGS+=(--xattrs)
fi

# The following code is inspired from http://unix.stackexchange.com/questions/82598
n=0
until [ $n -ge 5 ]
do
  tar --create --file $CC_SNAPSHOT_TAR_PATH ${TAR_ARGS[@]} / && break
  n=$[$n+1]
  sleep 15
done

# Get the size of tar and warn user if exceeds threshold property
SNAPSHOT_TAR_SIZE=$(($(stat -c %s $CC_SNAPSHOT_TAR_PATH) / 1024 / 1024 ))
LARGE_TAR_CONTINUE='yes'
if [ $SNAPSHOT_TAR_SIZE -gt $CC_SNAPSHOT_MAX_TARBALL_SIZE ] && [ "$IGNORE_WARNING" == false ]; then
  echo 'WARNING: snapshot is too large! May cause issues.'
  echo 'Do you want to continue? (yes/no)'
  read -r LARGE_TAR_CONTINUE_INPUT
  export LARGE_TAR_CONTINUE=$LARGE_TAR_CONTINUE_INPUT
fi

if [ ${LARGE_TAR_CONTINUE,,} != 'yes' ]; then
  echo 'Aborting...'
  exit 0
fi

[[ -n ${LABEL:-} ]] || {
  LABEL="$(ls -1 /dev/disk/by-label)"
  if [[ "$(wc -l <<<"$LABEL")" != "1" ]]; then
    >&2 echo "Unable to auto-detect disk label: found >1 labeled disks:"
    >&2 echo "$(sed 's/\n/ - /g' <<<"$LABEL")"
    >&2 echo "Please try again while explicitly setting the LABEL"
    >&2 echo "env variable to the desired disk label."
    exit 1
  fi
}
FS="ext4"

if [ $DISTRO = $UBUNTU ]; then
  if [ $UBUNTU_VERSION != "trusty" ]; then
    apt-get install -yq libguestfs-tools
  fi

  # Update guestfs appliances (prevent an error with virt-make-fs);
  # BUG: one package cannot be found (kpartx) and cause update-guestfs-appliance
  #      to exit with an error code;
  apt-get -yq update # APT repos may need an update in order to find kpartx
  apt-get install -yq kpartx
  if [ "$(which update-guestfs-appliance)" != "" ]; then
    update-guestfs-appliance || true
  fi
fi

if [ $DISTRO = $CENTOS ] && [ $CENTOS_VERSION -eq 7 ]; then
  FS="xfs"
fi

ARCH=`uname -i`
# The following is not necessary if the U-Boot kernel and ramdisk are installed at
# /boot/uImage and /boot/uInitrd, allowing the generic kernel to reside in the
# expected place.
#if [ "$ARCH" == "aarch64" ]; then
#  # The libguestfs appliance is not compatible with uboot kernels.
#  # We assume that there is a kernel available at /boot/vmlinuz-libguestfs
#  export SUPERMIN_KERNEL=/boot/vmlinuz-libguestfs
#  export SUPERMIN_KERNEL_VERSION=`readlink /boot/vmlinuz | sed 's/vmlinuz-\(.*\)/\1/'`
#fi

# Confusingly, virt-make-fs uses the --partition flag to request adding an MBR
# to the image, while what we (and Ironic) call partition images are images
# without MBR, hence the inverted logic with the PARTITION_IMAGE variable.
if [ "$PARTITION_IMAGE" == false ]; then
  VIRT_MAKE_FS="virt-make-fs --partition"
else
  VIRT_MAKE_FS="virt-make-fs"
fi

# This will take 3 to 5 minutes. Next, convert the tar file into a qcow2 image
# (if you don't want to use the XFS file system, you can replace xfs by ext4):
$VIRT_MAKE_FS --format="$CC_SNAPSHOT_DISK_FORMAT" \
  --type="$FS" \
  --label="$LABEL" \
  "$CC_SNAPSHOT_TAR_PATH" \
  "$CC_SNAPSHOT_CONVERTED_PATH"

# Our ARM64 images use U-Boot, so don't install GRUB
if [ "$PARTITION_IMAGE" == false ] && [ "$ARCH" != "aarch64" ]; then
  if [ $DISTRO = $CENTOS ]; then
    # and looking at the name of the file in that directory. Next ensure that the GRUB bootloader is present in the image:
    virt-customize -a $CC_SNAPSHOT_CONVERTED_PATH --run-command 'grub2-install /dev/sda && grub2-mkconfig -o /boot/grub2/grub.cfg'
  fi

  if [ $DISTRO = $UBUNTU ]; then
    # Next ensure that the GRUB bootloader is present in the image:
    guestfish -a $CC_SNAPSHOT_CONVERTED_PATH -i sh 'grub-install /dev/sda && grub-mkconfig -o /boot/grub/grub.cfg'
  fi
fi

# To remove unwanted configuration information from your image, run:
virt-sysprep -a $CC_SNAPSHOT_CONVERTED_PATH

# To complete the preparation of your snapshot image, create a compressed version of it:
qemu-img convert $CC_SNAPSHOT_CONVERTED_PATH -O $CC_SNAPSHOT_DISK_FORMAT $CC_SNAPSHOT_CONVERTED_COMPRESSED_PATH -c

################################
# Upload the Snapshot on Glance
################################

# The final steps are to upload your snapshot image to OpenStack Glance.
if [ "$PARTITION_IMAGE" == false ]; then
  openstack image create \
    --disk-format $CC_SNAPSHOT_DISK_FORMAT \
    --container-format bare \
    $PROVENANCE_PROPERTIES \
    $SNAPSHOT_NAME <$CC_SNAPSHOT_CONVERTED_COMPRESSED_PATH
else
  echo "You asked for a partition image."
  echo "You will need to upload your kernel and ramdisk to Glance before uploading your image."
  echo "You may want to run 'source /tmp/openrc' to set your OpenStack credentials."
  echo "After kernel and ramdisk are uploaded, run the below, filling in IMAGE_..._UUID:"
  echo
  echo "openstack image create \\"
  echo "  --disk-format $CC_SNAPSHOT_DISK_FORMAT \\"
  echo "  --container-format bare \\"
  echo "  --property kernel_id=IMAGE_VMLINUZ_UUID \\"
  echo "  --property ramdisk_id=IMAGE_INITRD_UUID \\"
  echo "  $SNAPSHOT_NAME <$SNAPSHOT_QCOW2_COMPRESSED_PATH"
fi

exit 0
